public class Books {
    private String title;
    private String author;
    private String BN; // Book Number
    private String genre;
    private int publishedYear;
    private boolean available;
    private static int next = 0;

    // Static method to generate Book Number
    static String generateBN() {
        return "BookNo_" + next++;
    }

    // Default constructor
    public Books() {
        this.title = "UNKNOWN";
        this.author = "UNNAMED";
        this.publishedYear = 2024;
        this.genre = "General";
        this.BN = generateBN();
        this.available = true;
    }

    // Constructor with title
    public Books(String title) {
        this.title = title;
        this.author = "Babu";
        this.publishedYear = 2024;
        this.genre = "General";
        this.BN = generateBN();
        this.available = true;
    }

    // Constructor with title and author
    public Books(String title, String author) {
        this.title = title;
        this.author = author;
        this.publishedYear = 2024;
        this.genre = "General";
        this.BN = generateBN();
        this.available = true;
    }
    
    public Books(String title, String author, int publishedYear, String genre) {
    this.title = title;
    this.author = author;
    this.publishedYear = publishedYear;
    this.genre = genre;
    this.BN = generateBN();
    this.available = true;
}

    public Books(int id, String title, String author, String genre, boolean available) {
        this.BN =generateBN() ;
        this.title = title;
        this.author = author;
        this.genre = genre;
        this.available = available;
    }

    // Getters and Setters

    public String getID() {
        return this.BN;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getGenre() {
        return genre;
    }

    public int getYearPublished() {
        return publishedYear;
    }

    public boolean isAvailable() {
        return available;
    }

    // Method to display book details
    public String bookDetails() {
        return("Book ID: " + BN + ", Title: " + title + ", Author: " + author +
                ", Genre: " + genre + ", Year Published: " + publishedYear + ", Availability: " + available);
    }

    public void borrowBook() {
        available = false;
    }

    public void returnBook() {
        available = true;
    }
}


public class BaseMember {
    protected String name;
    protected String contactInfo;

    // Constructor
    public BaseMember(String name, String contactInfo) {
        this.name = name;
        this.contactInfo = contactInfo;
    }

    // Getter for name
    public String getName() { 
        return name; 
    }

    // Getter for contactInfo
    public String getContactInfo() { 
        return contactInfo; 
    }

    // Method to update contact info
    public void updateContactInfo(String newContactInfo) {
        this.contactInfo = newContactInfo;
    }
}


import java.util.ArrayList;
import java.util.List;

public class Members extends BaseMember {
    private String memberId;
    private List<Books> borrowedBooks;
    private static int memberCount = 0;
    private final int maxBorrowLimit = 5;

    public Members(String name, String contactInfo) {
        super(name, contactInfo);
        this.memberId = "M" + (++memberCount);
        this.borrowedBooks = new ArrayList<>();
    }


    public String getMemberId() { return memberId; }
    public List<Books> getBorrowedBooks() { return borrowedBooks; }

    public void borrowBook(Books book) {
        if (borrowedBooks.size() < maxBorrowLimit && book.isAvailable()) {
            borrowedBooks.add(book);
            book.borrowBook();
            System.out.println(getName() + " borrowed: " + book.getTitle());
        } else {
            System.out.println(getName() + " cannot borrow " + book.getTitle() + 
                               ". Limit reached or book unavailable.");
        }
    }

    public void returnBook(Books book, int overdueDays) {
        if (borrowedBooks.contains(book)) {
            borrowedBooks.remove(book);
            book.returnBook();
            System.out.println(getName() + " returned: " + book.getTitle());
        } else {
            System.out.println(getName() + " did not borrow " + book.getTitle());
        }
    }
    public String getName() { return name; }
    public String getContactInfo() { return contactInfo; }

    public boolean isEligibleToBorrow() { return borrowedBooks.size() < maxBorrowLimit; }
   
   public String memberDetails() {
    System.out.println("Borrowed Books: ");
    if (borrowedBooks.isEmpty()) {
        System.out.println("No books borrowed.");
    } else {
        for (Books book : borrowedBooks) {
            book.bookDetails();
        }
    }
return("Member ID: " + memberId + ", Name: " + this.getName() + ", Contact Info: " + this.getContactInfo());
}
}


import java.time.LocalDate;

class BaseTransaction {
    private Members member;
    private Books book;
    private LocalDate issueDate;
    private LocalDate dueDate;
    private LocalDate returnDate;
    private double fine;

    public BaseTransaction(Members member, Books book, LocalDate issueDate, LocalDate dueDate,double fine){
        this.member = member;
        this.book = book;
        this.issueDate = issueDate;
        this.dueDate = dueDate;
        this.returnDate = null;
        this.fine = fine;
    }

    public Members getMember() {
        return member;
    }

    public Books getBook() {
        return book;
    }

    public LocalDate getIssueDate() {
        return issueDate;
    }

    public LocalDate getDueDate() {
        return dueDate;
    }

    public LocalDate getReturnDate() {
        return returnDate;
    }

    public double getFine() {
        return fine;
    }

    public void completeTransaction(LocalDate returnDate) {
    this.returnDate = returnDate;
    int overdueDays = (int) java.time.temporal.ChronoUnit.DAYS.between(dueDate, returnDate);

    // Fine calculation
    this.fine = overdueDays > 0 ? overdueDays * 1.0 : 0.0; // Assuming a default fine rate of 1.0 per day
}
}



import java.time.LocalDate;

class Transaction extends BaseTransaction {
    private String transactionID;

    public Transaction(String transactionID, Members member, Books book, LocalDate issueDate, LocalDate dueDate,double fine) {
        super(member, book, issueDate, dueDate,fine);
        this.transactionID = transactionID;
    }
   
    public Transaction(int transactionId, Books book, Members member, LocalDate issueDate, LocalDate returnDate, double fine) {
        super(member, book, issueDate, returnDate,fine);
        this.transactionID = transactionID;
    }

    public String getTransactionID() {
        return transactionID;
    }

    public Books getBook() {
        // Return the book associated with this transaction
        return super.getBook(); // Ensure `BaseTransaction` has a `getBook` method that returns a `Books` object.
    }

    public Members getMember() {
        // Return the member associated with this transaction
        return super.getMember(); // Ensure `BaseTransaction` has a `getMember` method that returns a `Members` object.
    }

    public double PendingFine() {
        return getFine();
    }
 
    public void printDetails() {
        System.out.println("Transaction ID: " + transactionID);
        System.out.println("Member: " + getMember().getName());
        System.out.println("Book: " + getBook().getTitle());
        System.out.println("Issue Date: " + getIssueDate());
        System.out.println("Due Date: " + getDueDate());
        System.out.println("Return Date: " + getReturnDate());
        System.out.println("Fine: $" + PendingFine());
    }
}


import java.util.ArrayList;
import java.util.List;
import java.time.LocalDate;

class Library implements LibraryOperations {
    private static Library instance;
    private String libraryName;
    private String address;
    private String contactInfo;
    private List<Books> libraryBooks;
    private List<Members> members;
    private List<Librarian> librarians;
    private List<Transaction> transactions;
    private int totalBooks;
    private Settings settings;
    private FineCalculator fineCalculator;

    Library(String libraryName, String address, String contactInfo, FineCalculator fineCalculator) {
        this.libraryName = libraryName;
        this.address = address;
        this.contactInfo = contactInfo;
        this.libraryBooks = new ArrayList<>();
        this.members = new ArrayList<>();
        this.librarians = new ArrayList<>();
        this.transactions = new ArrayList<>();
        this.totalBooks = 0;
        this.fineCalculator = fineCalculator;
    }

    Library(String libraryName, String address, String contactInfo) {
        this(libraryName, address, contactInfo, new StandardFineCalculator());
    }

    public Library() {
    this.libraryBooks = new ArrayList<>();  
    this.members = new ArrayList<>();
    this.transactions = new ArrayList<>();
    addSampleData();
}

    public Library(List<Books> libraryBooks, List<Members> members, List<Transaction> transactions) {
        this.libraryBooks = libraryBooks;
        this.members = members;
        this.transactions = transactions;
    }

    @Override
    public void addBook(Books book) {
        libraryBooks.add(book);
        totalBooks++;
        System.out.println("Book added: " + book.getTitle() + " by " + book.getAuthor());
    }

    @Override
    public void removeBook(String bookID) {
        Books bookToRemove = findBookByID(bookID);
        if (bookToRemove != null) {
            libraryBooks.remove(bookToRemove);
            totalBooks--;
            System.out.println("Book removed: " + bookToRemove.getTitle());
        } else {
            System.out.println("Book with ID " + bookID + " not found.");
        }
    }

    @Override
    public void listAllBooks() {
        System.out.println("Listing all books in the library:");
        for (Books book : libraryBooks) {
            book.bookDetails();
        }
    }

    @Override
    public void registerMember(Members member) {
        members.add(member);
        System.out.println("Member registered: " + member.getName());
    }

    @Override
    public void removeMember(String memberID) {
        Members memberToRemove = findMemberByID(memberID);
        if (memberToRemove != null) {
            members.remove(memberToRemove);
            System.out.println("Member removed: " + memberToRemove.getName());
        } else {
            System.out.println("Member with ID " + memberID + " not found.");
        }
    }

    @Override
    public void listAllMembers() {
        System.out.println("Listing all members:");
        for (Members member : members) {
            member.memberDetails();
        }
    }

    @Override
    public void addLibrarian(Librarian librarian) {
        librarians.add(librarian);
        System.out.println("Librarian added: " + librarian.getName());
    }

    @Override
    public void removeLibrarian(String librarianID) {
        Librarian librarianToRemove = null;
        for (Librarian librarian : librarians) {
            if (librarian.getID().equals(librarianID)) {
                librarianToRemove = librarian;
                break;
            }
        }
        if (librarianToRemove != null) {
            librarians.remove(librarianToRemove);
            System.out.println("Librarian removed: " + librarianToRemove.getName());
        } else {
            System.out.println("Librarian with ID " + librarianID + " not found.");
        }
    }

    @Override
    public void issueBook(Members member, Books book) {
        if (member.isEligibleToBorrow() && book.isAvailable()) {
            member.borrowBook(book);
            transactions.add(new Transaction("TXN-" + transactions.size(), member,book,
java.time.LocalDate.now(),java.time.LocalDate.now().plusDays(14),0.0));
            System.out.println("Book issued: " + book.getTitle() + " to " + member.getName());
        } else {
            System.out.println("Book cannot be issued. Either the book is not available or the member has reached the borrowing limit.");
        }
    }

    @Override
    public void returnBook(Members member, Books book, int overdueDays) {
        if (member.getBorrowedBooks().contains(book)) {
            member.returnBook(book, overdueDays);
            double fine = fineCalculator.calculateFine(overdueDays);
            if (fine > 0) {
                System.out.println("Member " + member.getName() + " has an overdue fine of $" + fine);
            } else {
                System.out.println("Member " + member.getName() + " returned on time.");
            }
        } else {
            System.out.println("Member " + member.getName() + " did not borrow this book.");
        }
    }

    @Override
    public void generateLibraryReport() {
        System.out.println("Library Report: ");
        System.out.println("Total books in the library: " + totalBooks);
        listAllBooks();
        System.out.println("Total members in the library: " + members.size());
        listAllMembers();
    }

    public List<Books> getLibraryBooks() {
        System.out.println("Library books count: " + libraryBooks.size());
        return libraryBooks;
    }

    public void setFineRate(double newFineRate) {
        if (fineCalculator instanceof StandardFineCalculator) {
            ((StandardFineCalculator) fineCalculator).setFineRate(newFineRate);
        }
    }

    public int getTotalBooks() {
        return totalBooks;
    }

    public List<Members> getMembers() {
        return members;
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }

    private Books findBookByID(String bookID) {
        for (Books book : libraryBooks) {
            if (book.getID().equals(bookID)) {
                return book;
            }
        }
        return null;
    }
    
    public FineCalculator getFineCalculator() {
        return fineCalculator;
    }

    private Members findMemberByID(String memberID) {
        for (Members member : members) {
            if (member.getMemberId().equals(memberID)) {
                return member;
            }
        }
        return null;
    }

    public Books findBookByTitle(String title) {
        for (Books book : libraryBooks) {
            if (book.getTitle().equalsIgnoreCase(title)) {
                return book;
            }
        }
        return null;
    }

    public Members findMemberByName(String name) {
        for (Members member : members) {
            if (member.getName().equalsIgnoreCase(name)) {
                return member;
            }
        }
        return null;
    }

    public Transaction findTransaction(Members member, Books book) {
        for (Transaction transaction : transactions) {
            if (transaction.getBook().equals(book) && transaction.getMember().equals(member)) {
                return transaction;
            }
        }
        return null;
    }

    public Settings getSettings() {
        return settings;
    }


    public void updateLibraryInfo(String newName, String newAddress, String newContactInfo) {
        this.libraryName = newName;
        this.address = newAddress;
        this.contactInfo = newContactInfo;
        System.out.println("Library information updated.");
    }
   public static Library getInstance() {
        if (instance == null) {
            instance = new Library();
        }
        return instance;
    }

    public void addTransaction(Transaction transaction) {
        transactions.add(transaction);
    }

    public double calculateFine(int overdueDays) {
        return overdueDays * 1.5; // Example: $1.5 fine per overdue day
    }

    public void addMember(Members member) {
        members.add(member);
    }

   private void addSampleData() {
        // Add sample books
        libraryBooks.add(new Books(1, "Book Title 1", "Author 1", "Fiction", true));
        libraryBooks.add(new Books(2, "Book Title 2", "Author 2", "Non-Fiction", true));

        // Add sample members
        members.add(new Members("John Doe", "1234567890"));
        members.add(new Members("Jane Smith", "9876543210"));

        transactions.add(new Transaction(1, libraryBooks.get(0), members.get(0), LocalDate.now(), null, 0));
transactions.add(new Transaction(2, libraryBooks.get(1), members.get(1), LocalDate.now().minusDays(5), LocalDate.now(), 10));

    }

}



interface LibraryOperations {
    void addBook(Books book);
    void removeBook(String bookID);
    void listAllBooks();
    void registerMember(Members member);
    void removeMember(String memberID);
    void listAllMembers();
    void addLibrarian(Librarian librarian);
    void removeLibrarian(String librarianID);
    void issueBook(Members member, Books book);
    void returnBook(Members member, Books book, int overdueDays);
    void generateLibraryReport();
}

class Librarian extends BaseMember{
    private String Id;
    private String role;
    private int yearsOfExperience;
    private static int next=0; 

    // Constructor for Librarian with name, contact info, and experience
    Librarian(String name, String contactInfo, int experience) {
        super(name, contactInfo);
        this.role = "Senior"; // Default role for experienced librarians
        this.yearsOfExperience = experience;
        this.Id="ID-"+(next++);
    }

    // Constructor for Librarian with name and contact info, defaults to Junior role
    Librarian(String name, String contactInfo) {
        super(name, contactInfo);
        this.role = "Junior"; // Default role for new librarians
        this.yearsOfExperience = 0; // Default experience is 0 for new librarians
        this.Id="ID-"+(next++);
     }

     public String getID(){
       return Id;
     }

    // Method to get details of the librarian
    public void getDetails() {
        System.out.println("Name of librarian: " + getName() + 
                           ", ID: " + getID() + 
                           ", Contact: " + getContactInfo() + 
                           ", Role: " + role + 
                           ", Experience: " + yearsOfExperience + " years.");
    }

    // Method to update years of experience
    public void updateExperience(int experience) {
        this.yearsOfExperience = experience;
        System.out.println("Updated experience for " + getName() + ": " + yearsOfExperience + " years.");
    }
}


abstract class FineCalculator {
    protected double finePerDay = 1.0; // Default fine rate

    // Abstract method to calculate fine, to be implemented in subclasses
    public abstract double calculateFine(int overdueDays);

    // Optional method to set the fine rate if needed
    public void setFineRate(double fineRate) {
        this.finePerDay = fineRate;
    }

    // Method to get the current fine rate
    public double getFineRate() {
        return finePerDay;
    }
}

class StandardFineCalculator extends FineCalculator {
    @Override
    public double calculateFine(int overdueDays) {
        // Calculate fine only if there are overdue days
        return overdueDays > 0 ? overdueDays * finePerDay : 0;
    }
}


import java.time.LocalDate;
import java.util.List;

class Report {
    private List<Books> libraryBooks;
    private List<Members> membersList;
    private LocalDate reportDate;

    public Report(List<Books> libraryBooks, List<Members> membersList) {
        this.libraryBooks = libraryBooks;
        this.membersList = membersList;
        this.reportDate = LocalDate.now();
    }

    public void generateBookReport() {
        System.out.println("Library Book Report");
        System.out.println("Total Books: " + libraryBooks.size());

        for (Books book : libraryBooks) {
            System.out.println("ID: " + book.getID() + ", Title: " + book.getTitle() + 
                               ", Author: " + book.getAuthor() + 
                               ", Published Year: " + book.getYearPublished());
        }
    }

    public void generateMemberReport() {
        if (membersList == null || membersList.isEmpty()) {
            System.out.println("No members found.");
            return;
        }
        System.out.println("\nLibrary Member Report");
        System.out.println("===========================");
        System.out.println("Report Date: " + reportDate);
        System.out.println("===========================");
        for (Members member : membersList) {
            System.out.println("- " + member.getName() + ", Email: " + member.getContactInfo());
        }
    }

    public void generateTransactionReport(List<Transaction> transactions) {
        System.out.println("\nTransaction Report");
        System.out.println("===========================");
        System.out.println("Report Date: " + reportDate);
        System.out.println("===========================");
        for (Transaction transaction : transactions) {
            transaction.printDetails();
        }
    }
}


import java.util.List;
public class Search {
    private Library library;
    
    public Search(Library library) {
        this.library = library;
    }

    public Books findBookByTitle(String title) {
        for (Books book : library.getLibraryBooks()) { 
            if (book.getTitle().equalsIgnoreCase(title)) {
                return book;
            }
        }
        return null;
    }


    public Members findMemberByName(String name) {
        for (Members member : library.getMembers()) { 
            if (member.getName().equalsIgnoreCase(name)) {
                return member;
            }
        }
        return null; // Member not found
    }

    // Search and display book details by title
    public void searchBookByTitle(String title) {
        Books book = findBookByTitle(title);
        if (book != null) {
            System.out.println("Book found:");
            book.bookDetails(); // Display detailed information about the book
        } else {
            System.out.println("Book not found!");
        }
    }

    // Search and display member details by name
    public void searchMemberByName(String name) {
        Members member = findMemberByName(name);
        if (member != null) {
            System.out.println("Member found:");
            member.memberDetails(); // Display detailed information about the member
        } else {
            System.out.println("Member not found!");
        }
    }
}

import java.util.Scanner;

public class AdminPanel {
    private Library library;
    private Settings settings;
    private Scanner scanner;

    public AdminPanel(Library library, Settings settings, Scanner scanner) {
        this.library = library;
        this.settings = settings;
        this.scanner = scanner;
    }

    public void start() {
        int choice = 0;
        do {
            System.out.println("\n--- Admin Panel ---");
            System.out.println("1. Add Book");
            System.out.println("2. Remove Book");
            System.out.println("3. Add Member");
            System.out.println("4. Remove Member");
            System.out.println("5. View Library Report");
            System.out.println("6. Update Settings");
            System.out.println("7. Exit Admin Panel");
            System.out.print("Enter your choice: ");

            if (!scanner.hasNextInt()) {
                System.out.println("Invalid input! Please enter a number.");
                scanner.next(); // Clear invalid input
                continue;
            }
            choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            
            switch (choice) {
                case 1:
                    addBook();
                    break;
                case 2:
                    removeBook();
                    break;
                case 3:
                    addMember();
                    break;
                case 4:
                    removeMember();
                    break;
                case 5:
                    viewLibraryReport();
                    break;
                case 6:
                    updateSettings();
                    break;
                case 7:
                    System.out.println("Exiting Admin Panel.");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 7);
    }

    private void addBook() {
        System.out.print("Enter the book title: ");
        String title = scanner.nextLine();
        System.out.print("Enter the author name: ");
        String author = scanner.nextLine();
        System.out.print("Enter the genre: ");
        String genre = scanner.nextLine();
        System.out.print("Enter the published year: ");
        if (!scanner.hasNextInt()) {
            System.out.println("Invalid input! Published year must be a number.");
            scanner.next(); // Clear invalid input
            return;
        }
        int year = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        Books book = new Books(title, author, year, genre);
        library.addBook(book);
        System.out.println("Book added successfully!");
    }

    private void removeBook() {
        System.out.print("Enter the book ID to remove: ");
        String bookID = scanner.nextLine();
        library.removeBook(bookID);
    }

    private void addMember() {
        System.out.print("Enter the member name: ");
        String name = scanner.nextLine();
        System.out.print("Enter the contact info: ");
        String contact = scanner.nextLine();

        Members member = new Members(name, contact);
        library.registerMember(member);
        System.out.println("Member added successfully!");
    }

    private void removeMember() {
        System.out.print("Enter the member ID to remove: ");
        String memberID = scanner.nextLine();
        library.removeMember(memberID);
    }

    private void viewLibraryReport() {
        System.out.println("Generating Library Report...");
        library.generateLibraryReport();
    }

    private void updateSettings() {
        System.out.println("\n--- Update Settings ---");
        System.out.println("1. Update Library Name");
        System.out.println("2. Update Address");
        System.out.println("3. Update Contact Info");
        System.out.println("4. Update Fine Rate");
        System.out.println("5. View Current Settings");
        System.out.println("6. Exit Settings");
        System.out.print("Enter your choice: ");

        int choice;
        if (!scanner.hasNextInt()) {
            System.out.println("Invalid input! Please enter a number.");
            scanner.next(); // Clear invalid input
            return;
        }
        choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        switch (choice) {
            case 1:
                System.out.print("Enter new library name: ");
                String libraryName = scanner.nextLine();
                settings.setLibraryName(libraryName);
                System.out.println("Library name updated successfully!");
                break;
            case 2:
                System.out.print("Enter new address: ");
                String address = scanner.nextLine();
                settings.setAddress(address);
                System.out.println("Address updated successfully!");
                break;
            case 3:
                System.out.print("Enter new contact info: ");
                String contactInfo = scanner.nextLine();
                settings.setContactInfo(contactInfo);
                System.out.println("Contact info updated successfully!");
                break;
            case 4:
                System.out.print("Enter new fine rate: ");
                if (!scanner.hasNextDouble()) {
                    System.out.println("Invalid input! Fine rate must be a number.");
                    scanner.next(); // Clear invalid input
                    return;
                }
                double fineRate = scanner.nextDouble();
                scanner.nextLine(); // Consume newline
                settings.setFineRate(fineRate);
                System.out.println("Fine rate updated successfully!");
                break;
            case 5:
                System.out.println("Current Settings:");
                settings.displaySettings();
                break;
            case 6:
                System.out.println("Exiting Settings.");
                break;
            default:
                System.out.println("Invalid choice! Please try again.");
        }
    }
}


public class Settings {
    private static Settings instance;
    private String libraryName;
    private String address;
    private String contactInfo;
    private double fineRate;

    public Settings(String libraryName, String address, String contactInfo, double fineRate) {
        this.libraryName = libraryName;
        this.address = address;
        this.contactInfo = contactInfo;
        this.fineRate = fineRate;
    }

    public Settings(String libraryName, String address, double fineRate) {
        this.libraryName = libraryName;
        this.address = address;
        this.contactInfo = "Not Provided"; // Default value for contact info
        this.fineRate = fineRate;
    }
    
    private Settings() {
        this.libraryName = "Mahindra University";
        this.address = "Bahadurpally,Hyderabad";
        this.contactInfo = "mahindrauniversity@gmail.com";
        this.fineRate = 1.0;
    }
   
    public static Settings getInstance() {
        if (instance == null) {
            instance = new Settings();
        }
        return instance;
    }

    // Getters
    public String getLibraryName() {
        return libraryName;
    }

    public String getAddress() {
        return address;
    }

    public String getContactInfo() {
        return contactInfo;
    }

    public double getFineRate() {
        return fineRate;
    }

    // Setters
    public void setLibraryName(String libraryName) {
        this.libraryName = libraryName;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setContactInfo(String contactInfo) {
        this.contactInfo = contactInfo;
    }

    public void setFineRate(double fineRate) {
        this.fineRate = fineRate;
    }

    // Method to display current settings
    public String displaySettings() {
       return("Library Name: " + libraryName + ", Address: " + address + 
                           ", Contact Info: " + contactInfo + ", Fine Rate: $" + fineRate + " per day");
    }
}



import java.util.Scanner;
public class UserInterface {
    private Library library;
    private Search search;
    private Settings settings;
    private Scanner scanner;

    public UserInterface(Library library, Search search, Settings settings, Scanner scanner) {
        this.library = library;
        this.search = search;
        this.settings = settings;
        this.scanner = scanner;
    }

    public void start() {
        int choice=0;
        do {
            System.out.println("\n--- User Interface ---");
            System.out.println("1. Search for a Book");
            System.out.println("2. Search for a Member");
            System.out.println("3. Borrow a Book");
            System.out.println("4. Return a Book");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            if (!scanner.hasNextInt()) {
                System.out.println("Invalid input! Please enter a number.");
                scanner.next(); // Clear invalid input
                continue;
            }
            choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    searchBook();
                    break;
                case 2:
                    searchMember();
                    break;
                case 3:
                    issueBook();
                    break;
                case 4:
                    returnBook();
                    break;
                case 5:
                    System.out.println("Exiting User Interface.");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 5);
    }

    private void searchBook() {
        System.out.print("Enter the book title: ");
        String bookTitle = scanner.nextLine();
        Books book = search.findBookByTitle(bookTitle);
        if (book != null) {
            System.out.println("Book found:");
            book.bookDetails();
        } else {
            System.out.println("Book not found!");
        }
    }

    private void searchMember() {
        System.out.print("Enter the member name: ");
        String memberName = scanner.nextLine();
        Members member = search.findMemberByName(memberName);
        if (member != null) {
            System.out.println("Member found:");
            member.memberDetails();
        } else {
            System.out.println("Member not found!");
        }
    }

    private void issueBook() {
        System.out.print("Enter the member name: ");
        String memberName = scanner.nextLine();
        Members member = search.findMemberByName(memberName);
        if (member == null) {
            System.out.println("Member not found!");
            return;
        }

        System.out.print("Enter the book title: ");
        String bookTitle = scanner.nextLine();
        Books book = search.findBookByTitle(bookTitle);
        if (book == null) {
            System.out.println("Book not found!");
            return;
        }

        library.issueBook(member, book);
        System.out.println("Book issued successfully!");
    }

    private void returnBook() {
        System.out.print("Enter the member name: ");
        String memberName = scanner.nextLine();
        Members member = search.findMemberByName(memberName);
        if (member == null) {
            System.out.println("Member not found!");
            return;
        }

        System.out.print("Enter the book title: ");
        String bookTitle = scanner.nextLine();
        Books book = search.findBookByTitle(bookTitle);
        if (book == null) {
            System.out.println("Book not found!");
            return;
        }

        System.out.print("Enter the overdue days: ");
        if (!scanner.hasNextInt()) {
            System.out.println("Invalid input! Overdue days must be a number.");
            scanner.next(); // Clear invalid input
            return;
        }
        int overdueDays = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        library.returnBook(member, book, overdueDays);
        System.out.println("Book returned successfully!");
    }
}


import java.util.HashMap;
import java.util.Scanner;
import java.util.ArrayList;

public class LibraryManagementTest {
    public static void main(String[] args) {
        // Initialize the library
        Library library = new Library("City Library", "123 Main St", "contact@citylibrary.com");

        // Initialize settings
        Settings settings = new Settings("City Library", "123 Main St", "contact@citylibrary.com", 1.5);

        // Add some initial books directly to the library
        library.addBook(new Books("The Great Gatsby", "F. Scott Fitzgerald", 1925, "Fiction"));
        library.addBook(new Books("To Kill a Mockingbird", "Harper Lee", 1960, "Fiction"));

        // Add some initial members directly to the library
        library.registerMember(new Members("John Doe", "john.doe@example.com"));
        library.registerMember(new Members("Jane Smith", "jane.smith@example.com"));
     
        ArrayList<Books> books = new ArrayList<>();
        ArrayList<Members> members = new ArrayList<>();

        for (Books book : books) {
            library.addBook(book);  // Adding books to the library
        }

        for (Members member : members) {
            library.registerMember(member);  // Adding members to the library
        }

        // Shared Scanner for input
        Scanner scanner = new Scanner(System.in);

        // Shared Login system: Separate credentials for admin and user
        HashMap<String, String> adminCredentials = new HashMap<>();
        HashMap<String, String> userCredentials = new HashMap<>();

        // Add default credentials
        adminCredentials.put("admin", "admin123"); // Default admin credentials
        userCredentials.put("user", "user123");   // Default user credentials

        int choice = 0;
        do {
            System.out.println("\n--- Library Management System ---");
            System.out.println("1. User Interface");
            System.out.println("2. Admin Panel");
            System.out.println("3. Create New Login");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            if (scanner.hasNextInt()) {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline character

                switch (choice) {
                    case 1:
                        // Authenticate user credentials
                        if (authenticate(scanner, userCredentials, "user")) {
                            UserInterface ui = new UserInterface(library, new Search(library), settings, scanner);
                            ui.start();
                        } else {
                            System.out.println("Access denied. Invalid user credentials.");
                        }
                        break;

                    case 2:
                        // Authenticate admin credentials
                        if (authenticate(scanner, adminCredentials, "admin")) {
                            AdminPanel adminPanel = new AdminPanel(library, settings, scanner);
                            adminPanel.start();
                        } else {
                            System.out.println("Access denied. Invalid admin credentials.");
                        }
                        break;

                    case 3:
                        createLogin(scanner, adminCredentials, userCredentials);
                        break;

                    case 4:
                        System.out.println("Exiting Library Management System. Goodbye!");
                        break;

                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } else {
                System.out.println("Invalid input. Please enter a valid number.");
                scanner.next(); // Clear the invalid input
            }
        } while (choice != 4);

        // Close the scanner after use
        scanner.close();
    }

    /**
     * Authenticate the user or admin based on their role.
     * @param scanner Scanner for input
     * @param credentials Map storing valid usernames and passwords
     * @param role Expected role ("admin" or "user")
     * @return true if authenticated successfully; false otherwise
     */
    private static boolean authenticate(Scanner scanner, HashMap<String, String> credentials, String role) {
        System.out.println("\n--- " + role.toUpperCase() + " Login ---");
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        if (credentials.containsKey(username) && credentials.get(username).equals(password)) {
            System.out.println(role.substring(0, 1).toUpperCase() + role.substring(1) + " login successful!");
            return true;
        } else {
            return false;
        }
    }

    /**
     * Allow users to create new admin or user logins.
     * @param scanner Scanner for input
     * @param adminCredentials Map storing admin credentials
     * @param userCredentials Map storing user credentials
     */
    private static void createLogin(Scanner scanner, HashMap<String, String> adminCredentials, HashMap<String, String> userCredentials) {
        System.out.println("\n--- Create New Login ---");
        System.out.println("1. Create Admin Login");
        System.out.println("2. Create User Login");
        System.out.print("Enter your choice: ");

        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline character

        if (choice == 1 || choice == 2) {
            System.out.print("Enter username: ");
            String username = scanner.nextLine();
            System.out.print("Enter password: ");
            String password = scanner.nextLine();

            if (choice == 1) {
                if (adminCredentials.containsKey(username)) {
                    System.out.println("Admin username already exists. Choose a different username.");
                } else {
                    adminCredentials.put(username, password);
                    System.out.println("Admin login created successfully.");
                }
            } else {
                if (userCredentials.containsKey(username)) {
                    System.out.println("User username already exists. Choose a different username.");
                } else {
                    userCredentials.put(username, password);
                    System.out.println("User login created successfully.");
                }
            }
        } else {
            System.out.println("Invalid choice. Returning to the main menu.");
        }
    }
}


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;

public class MainMenu {
    private Library library;
    private Settings settings;
    private Search search;
    private static HashMap<String, String> adminCredentials = new HashMap<>();
    private static HashMap<String, String> userCredentials = new HashMap<>();

    public MainMenu(Library library, Settings settings, Search search) {
        this.library = library;
        this.settings = settings;
        this.search = search;
        adminCredentials.put("admin", "admin123");
        userCredentials.put("user", "user123");
        launch();
    }

    public void launch(){
        
        JFrame mainFrame = new JFrame("Library Management System");
        mainFrame.setSize(400, 300);
        mainFrame.setLayout(new GridLayout(4, 1, 10, 10));
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JButton userButton = new JButton("User Interface");
        JButton adminButton = new JButton("Admin Panel");
        JButton createLoginButton = new JButton("Create New Login");
        JButton exitButton = new JButton("Exit");

        userButton.addActionListener(e -> {
            new UserLoginGUI(library, search,settings);
            mainFrame.dispose();
        });

        adminButton.addActionListener(e -> {
                new AdminLoginGUI();
                mainFrame.dispose();
        });

        createLoginButton.addActionListener(e -> {
            new CreateLoginGUI(this);
            mainFrame.dispose();
        });

        exitButton.addActionListener(e -> System.exit(0));

        mainFrame.add(userButton);
        mainFrame.add(adminButton);
        mainFrame.add(createLoginButton);
        mainFrame.add(exitButton);

        applyStyling(mainFrame);

        mainFrame.setVisible(true);
    }

    public static HashMap<String, String> getAdminCredentials() {
        return adminCredentials;
    }

    public static HashMap<String, String> getUserCredentials() {
        return userCredentials;
    }

    private void applyStyling(JFrame frame) {
        for (Component component : frame.getContentPane().getComponents()) {
            if (component instanceof JButton) {
                component.setFont(new Font("Arial", Font.BOLD, 14));
                component.setBackground(new Color(173, 216, 230));
            }
        }
    }

    public Library getLibrary() {
        return library;
    }

    public Settings getSettings() {
        return settings;
    }

    public Search getSearch() {
        return search;
    }

}


import javax.swing.*;
import java.awt.*;

public class UserLoginGUI {
    public UserLoginGUI(Library library, Search search, Settings settings) {
        JFrame loginFrame = new JFrame("User Login");
        loginFrame.setSize(300, 200);
        loginFrame.setLayout(new GridLayout(3, 2, 10, 10));

        JLabel userLabel = new JLabel("Username:");
        JLabel passLabel = new JLabel("Password:");
        JTextField userField = new JTextField();
        JPasswordField passField = new JPasswordField();
        JButton loginButton = new JButton("Login");
        JButton backButton = new JButton("Back");

        loginButton.addActionListener(e -> {
            String username = userField.getText();
            String password = new String(passField.getPassword());

            if (MainMenu.getUserCredentials().containsKey(username) &&
                MainMenu.getUserCredentials().get(username).equals(password)) {
                new UserInterfaceGUI(library, search, settings);
                loginFrame.dispose();
            } else {
                JOptionPane.showMessageDialog(loginFrame, "Invalid credentials", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        backButton.addActionListener(e -> {
            loginFrame.dispose();
            new MainMenu(library, settings, search);
        });

        loginFrame.add(userLabel);
        loginFrame.add(userField);
        loginFrame.add(passLabel);
        loginFrame.add(passField);
        loginFrame.add(loginButton);
        loginFrame.add(backButton);

        loginFrame.setVisible(true);
    }
}


import javax.swing.*;
import java.awt.*;

public class UserInterfaceGUI {
    public UserInterfaceGUI(Library library, Search search, Settings settings) {
        JFrame userFrame = new JFrame("User Interface");
        userFrame.setSize(400, 300);
        userFrame.setLayout(new GridLayout(5, 1, 10, 10));

        JButton searchBookButton = new JButton("Search Book");
        JButton searchMemberButton = new JButton("Search Member");
        JButton issueBookButton = new JButton("Borrow Book");
        JButton returnBookButton = new JButton("Return Book");
        JButton backButton = new JButton("Back");

        searchBookButton.addActionListener(e -> new SearchBookGUI(search));
        searchMemberButton.addActionListener(e -> new SearchMemberGUI(search));

        issueBookButton.addActionListener(e -> new IssueBookGUI(library, search));
        returnBookButton.addActionListener(e -> new ReturnBookGUI(library,search));

        backButton.addActionListener(e -> {
            userFrame.dispose();
            new MainMenu(library, settings, search);
        });

        userFrame.add(searchBookButton);
        userFrame.add(searchMemberButton);
        userFrame.add(issueBookButton);
        userFrame.add(returnBookButton);
        userFrame.add(backButton);

        userFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;

public class SearchBookGUI {
    public SearchBookGUI(Search search) {
        JFrame searchFrame = new JFrame("Search Book");
        searchFrame.setSize(400, 300);
        searchFrame.setLayout(new BorderLayout(10, 10));

        JPanel searchPanel = new JPanel(new BorderLayout());
        JLabel label = new JLabel("Enter Book Title:");
        JTextField titleField = new JTextField();
        JButton searchButton = new JButton("Search");

        searchPanel.add(label, BorderLayout.WEST);
        searchPanel.add(titleField, BorderLayout.CENTER);
        searchPanel.add(searchButton, BorderLayout.EAST);

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);

        searchButton.addActionListener(e -> {
            String title = titleField.getText();
            Books book = search.findBookByTitle(title);
            if (book != null) {
                resultArea.setText("Book found:"+book.bookDetails() );
            } else {
                resultArea.setText("Book not found.");
            }
        });

        searchFrame.add(searchPanel, BorderLayout.NORTH);
        searchFrame.add(new JScrollPane(resultArea), BorderLayout.CENTER);
        searchFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class IssueBookGUI {
    public IssueBookGUI(Library library, Search search) {
        JFrame issueFrame = new JFrame("Issue Book");
        issueFrame.setSize(400, 300);
        issueFrame.setLayout(new GridLayout(4, 2, 10, 10));

        JLabel memberLabel = new JLabel("Enter Member Name:");
        JTextField memberField = new JTextField();
        JLabel bookLabel = new JLabel("Enter Book Title:");
        JTextField bookField = new JTextField();
        JButton issueButton = new JButton("Issue Book");
        JButton backButton = new JButton("Back");

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);

        issueButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(ActionEvent e) {
                String memberName = memberField.getText();
                String bookTitle = bookField.getText();

                Members member = search.findMemberByName(memberName);
                Books book = search.findBookByTitle(bookTitle);

                if (member != null && book != null) {
                    if (book.isAvailable()) {
                        library.issueBook(member, book);
                        resultArea.setText("Book issued successfully:\n" +
                                "Book: " + book.getTitle() + "\n" +
                                "Member: " + member.getName());
                    } else {
                        resultArea.setText("Book is already issued!");
                    }
                } else {
                    resultArea.setText("Invalid member or book details.");
                }
            }
        });

        backButton.addActionListener(e -> issueFrame.dispose());

        issueFrame.add(memberLabel);
        issueFrame.add(memberField);
        issueFrame.add(bookLabel);
        issueFrame.add(bookField);
        issueFrame.add(issueButton);
        issueFrame.add(backButton);
        issueFrame.add(new JScrollPane(resultArea));

        issueFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class IssueBookGUI {
    public IssueBookGUI(Library library, Search search) {
        JFrame issueFrame = new JFrame("Issue Book");
        issueFrame.setSize(400, 300);
        issueFrame.setLayout(new GridLayout(4, 2, 10, 10));

        JLabel memberLabel = new JLabel("Enter Member Name:");
        JTextField memberField = new JTextField();
        JLabel bookLabel = new JLabel("Enter Book Title:");
        JTextField bookField = new JTextField();
        JButton issueButton = new JButton("Issue Book");
        JButton backButton = new JButton("Back");

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);

        issueButton.addActionListener(new ActionListener() {
            
            public void actionPerformed(ActionEvent e) {
                String memberName = memberField.getText();
                String bookTitle = bookField.getText();

                Members member = search.findMemberByName(memberName);
                Books book = search.findBookByTitle(bookTitle);

                if (member != null && book != null) {
                    if (book.isAvailable()) {
                        library.issueBook(member, book);
                        resultArea.setText("Book issued successfully:\n" +
                                "Book: " + book.getTitle() + "\n" +
                                "Member: " + member.getName());
                    } else {
                        resultArea.setText("Book is already issued!");
                    }
                } else {
                    resultArea.setText("Invalid member or book details.");
                }
            }
        });

        backButton.addActionListener(e -> issueFrame.dispose());

        issueFrame.add(memberLabel);
        issueFrame.add(memberField);
        issueFrame.add(bookLabel);
        issueFrame.add(bookField);
        issueFrame.add(issueButton);
        issueFrame.add(backButton);
        issueFrame.add(new JScrollPane(resultArea));

        issueFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ReturnBookGUI {
    public ReturnBookGUI(Library library, Search search) {
        JFrame returnFrame = new JFrame("Return Book");
        returnFrame.setSize(400, 300);
        returnFrame.setLayout(new GridLayout(5, 2, 10, 10));

        JLabel memberLabel = new JLabel("Enter Member Name:");
        JTextField memberField = new JTextField();
        JLabel bookLabel = new JLabel("Enter Book Title:");
        JTextField bookField = new JTextField();
        JLabel overdueLabel = new JLabel("Enter Overdue Days:");
        JTextField overdueField = new JTextField();
        JButton returnButton = new JButton("Return Book");
        JButton backButton = new JButton("Back");

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);

        returnButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String memberName = memberField.getText();
                String bookTitle = bookField.getText();
                int overdueDays;

                try {
                    overdueDays = Integer.parseInt(overdueField.getText());
                } catch (NumberFormatException ex) {
                    resultArea.setText("Invalid input for overdue days.");
                    return;
                }

                Members member = search.findMemberByName(memberName);
                Books book = search.findBookByTitle(bookTitle);

                if (member != null && book != null) {
                    if (member.getBorrowedBooks().contains(book)) {
                        library.returnBook(member, book, overdueDays);
                        resultArea.setText("Book returned successfully:\n" +
                                "Book: " + book.getTitle() + "\n" +
                                "Member: " + member.getName() + "\n" +
                                "Fine: $" + library.getFineCalculator().calculateFine(overdueDays));
                    } else {
                        resultArea.setText("This book was not borrowed by the member.");
                    }
                } else {
                    resultArea.setText("Invalid member or book details.");
                }
            }
        });

        backButton.addActionListener(e -> returnFrame.dispose());

        returnFrame.add(memberLabel);
        returnFrame.add(memberField);
        returnFrame.add(bookLabel);
        returnFrame.add(bookField);
        returnFrame.add(overdueLabel);
        returnFrame.add(overdueField);
        returnFrame.add(returnButton);
        returnFrame.add(backButton);
        returnFrame.add(new JScrollPane(resultArea));

        returnFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;

public class SearchMemberGUI {
    public SearchMemberGUI(Search search) {
        JFrame searchFrame = new JFrame("Search Member");
        searchFrame.setSize(400, 300);
        searchFrame.setLayout(new BorderLayout(10, 10));

        JPanel searchPanel = new JPanel(new BorderLayout());
        JLabel label = new JLabel("Enter Member Name:");
        JTextField nameField = new JTextField();
        JButton searchButton = new JButton("Search");

        searchPanel.add(label, BorderLayout.WEST);
        searchPanel.add(nameField, BorderLayout.CENTER);
        searchPanel.add(searchButton, BorderLayout.EAST);

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultArea);

        searchButton.addActionListener(e -> {
            Members member = search.findMemberByName(nameField.getText());
            if (member != null) {
                resultArea.setText("Member Details:\n");
                resultArea.append("Name: " + member.getName() + "\n");
                resultArea.append("Contact Info: " + member.getContactInfo() + "\n");
                resultArea.append("Borrowed Books:\n");
                for (Books book : member.getBorrowedBooks()) {
                   resultArea.append("- " + book.getTitle() + " by " + book.getAuthor() + "\n");
                }
            } else {
                resultArea.setText("Member not found.");
            }
        });

        searchFrame.add(searchPanel, BorderLayout.NORTH);
        searchFrame.add(new JScrollPane(resultArea), BorderLayout.CENTER);
        searchFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;

public class AdminLoginGUI {
    public AdminLoginGUI() {
        Library library = Library.getInstance();
        Settings settings = Settings.getInstance();

        JFrame loginFrame = new JFrame("Admin Login");
        loginFrame.setSize(300, 200);
        loginFrame.setLayout(new GridLayout(3, 2, 10, 10));
        loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JLabel userLabel = new JLabel("Username:");
        JLabel passLabel = new JLabel("Password:");
        JTextField userField = new JTextField();
        JPasswordField passField = new JPasswordField();
        JButton loginButton = new JButton("Login");
        JButton backButton = new JButton("Back");

        loginButton.addActionListener(e -> {
           String username = userField.getText();
           String password = new String(passField.getPassword());

           if (MainMenu.getAdminCredentials().containsKey(username) &&
               MainMenu.getAdminCredentials().get(username).equals(password)) {
               new AdminPanelGUI(library,settings);
               loginFrame.dispose();
          }
           else {
        JOptionPane.showMessageDialog(loginFrame, "Invalid credentials.", "Error", JOptionPane.ERROR_MESSAGE);
    }
});

        backButton.addActionListener(e -> {
            new MainMenu(library, settings, new Search(library));
            loginFrame.dispose();
        });

        loginFrame.add(userLabel);
        loginFrame.add(userField);
        loginFrame.add(passLabel);
        loginFrame.add(passField);
        loginFrame.add(loginButton);
        loginFrame.add(backButton);

        loginFrame.setVisible(true);
    }
}


import javax.swing.*;
import java.awt.*;

public class AdminPanelGUI {
    private Library library;
    private Settings settings;
    public AdminPanelGUI(Library library, Settings settings) {
        if (settings == null) {
            throw new IllegalArgumentException("Settings object cannot be null");
        }
        this.library = library;
        this.settings = settings;
        createAdminPanel();
    }
        
    private void createAdminPanel() {

        JFrame adminFrame = new JFrame("Admin Panel");
        adminFrame.setSize(400, 300);
        adminFrame.setLayout(new GridLayout(4, 1, 10, 10));

        JButton addBookButton = new JButton("Add Book");
        JButton removeBookButton = new JButton("Remove Book");
        JButton addMemberButton = new JButton("Add Member");
        JButton removeMemberButton = new JButton("Remove Member");
        JButton reportsButton = new JButton("Reports");
        JButton settingsButton = new JButton("Settings");
        JButton backButton = new JButton("Back");

        addBookButton.addActionListener(e -> new AddBookGUI(library));
        removeBookButton.addActionListener(e -> new RemoveBookGUI(library));
        addMemberButton.addActionListener(e -> new AddMemberGUI(library));
        removeMemberButton.addActionListener(e -> new RemoveMemberGUI(library));
        reportsButton.addActionListener(e -> new ReportsGUI(library, settings));
        settingsButton.addActionListener(e -> {
            if (settings != null) {
                new SettingsGUI(settings); // Pass settings to the GUI
            } else {
                System.err.println("Error: Settings object is null!");
            }
        });

        backButton.addActionListener(e -> {
            new MainMenu(library, settings, new Search(library)); // Go back to Main Menu
            adminFrame.dispose();
        });

        adminFrame.add(addBookButton);
        adminFrame.add(removeBookButton);
        adminFrame.add(addMemberButton);
        adminFrame.add(removeMemberButton);
        adminFrame.add(reportsButton);
        adminFrame.add(settingsButton);
        adminFrame.add(backButton);

        adminFrame.setVisible(true);
    }
}


import javax.swing.*;
import java.awt.*;

public class AddBookGUI {
    public AddBookGUI(Library library) {
        JFrame addBookFrame = new JFrame("Add Book");
        addBookFrame.setSize(400, 300);
        addBookFrame.setLayout(new GridLayout(5, 2, 10, 10));

        JLabel titleLabel = new JLabel("Title:");
        JLabel authorLabel = new JLabel("Author:");
        JLabel yearLabel = new JLabel("Published Year:");
        JLabel genreLabel = new JLabel("Genre:");
        JTextField titleField = new JTextField();
        JTextField authorField = new JTextField();
        JTextField yearField = new JTextField();
        JTextField genreField = new JTextField();
        JButton addButton = new JButton("Add");
        JButton cancelButton = new JButton("Cancel");

        addButton.addActionListener(e -> {
            String title = titleField.getText();
            String author = authorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String genre = genreField.getText();

            Books newBook = new Books(title, author, year, genre);
            library.addBook(newBook);

            JOptionPane.showMessageDialog(addBookFrame, "Book added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            addBookFrame.dispose();
        });

        cancelButton.addActionListener(e -> addBookFrame.dispose());

        addBookFrame.add(titleLabel);
        addBookFrame.add(titleField);
        addBookFrame.add(authorLabel);
        addBookFrame.add(authorField);
        addBookFrame.add(yearLabel);
        addBookFrame.add(yearField);
        addBookFrame.add(genreLabel);
        addBookFrame.add(genreField);
        addBookFrame.add(addButton);
        addBookFrame.add(cancelButton);

        addBookFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;

public class AddBookGUI {
    public AddBookGUI(Library library) {
        JFrame addBookFrame = new JFrame("Add Book");
        addBookFrame.setSize(400, 300);
        addBookFrame.setLayout(new GridLayout(5, 2, 10, 10));

        JLabel titleLabel = new JLabel("Title:");
        JLabel authorLabel = new JLabel("Author:");
        JLabel yearLabel = new JLabel("Published Year:");
        JLabel genreLabel = new JLabel("Genre:");
        JTextField titleField = new JTextField();
        JTextField authorField = new JTextField();
        JTextField yearField = new JTextField();
        JTextField genreField = new JTextField();
        JButton addButton = new JButton("Add");
        JButton cancelButton = new JButton("Cancel");

        addButton.addActionListener(e -> {
            String title = titleField.getText();
            String author = authorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String genre = genreField.getText();

            Books newBook = new Books(title, author, year, genre);
            library.addBook(newBook);

            JOptionPane.showMessageDialog(addBookFrame, "Book added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            addBookFrame.dispose();
        });

        cancelButton.addActionListener(e -> addBookFrame.dispose());

        addBookFrame.add(titleLabel);
        addBookFrame.add(titleField);
        addBookFrame.add(authorLabel);
        addBookFrame.add(authorField);
        addBookFrame.add(yearLabel);
        addBookFrame.add(yearField);
        addBookFrame.add(genreLabel);
        addBookFrame.add(genreField);
        addBookFrame.add(addButton);
        addBookFrame.add(cancelButton);

        addBookFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;

public class RemoveBookGUI {
    public RemoveBookGUI(Library library) {
        JFrame removeBookFrame = new JFrame("Remove Book");
        removeBookFrame.setSize(300, 200);
        removeBookFrame.setLayout(new GridLayout(3, 1, 10, 10));

        JLabel idLabel = new JLabel("Enter Book ID:");
        JTextField idField = new JTextField();
        JButton removeButton = new JButton("Remove");
        JButton cancelButton = new JButton("Cancel");

        removeButton.addActionListener(e -> {
            String bookId = idField.getText();
            library.removeBook(bookId);
            JOptionPane.showMessageDialog(removeBookFrame, "Book removed successfully (if it exists).", "Success", JOptionPane.INFORMATION_MESSAGE);
            removeBookFrame.dispose();
        });

        cancelButton.addActionListener(e -> removeBookFrame.dispose());

        removeBookFrame.add(idLabel);
        removeBookFrame.add(idField);
        removeBookFrame.add(removeButton);
        removeBookFrame.add(cancelButton);

        removeBookFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;

public class AddMemberGUI {
    public AddMemberGUI(Library library) {
        JFrame addMemberFrame = new JFrame("Add Member");
        addMemberFrame.setSize(400, 300);
        addMemberFrame.setLayout(new GridLayout(3, 2, 10, 10));

        JLabel nameLabel = new JLabel("Name:");
        JLabel contactLabel = new JLabel("Contact Info:");
        JTextField nameField = new JTextField();
        JTextField contactField = new JTextField();
        JButton addButton = new JButton("Add");
        JButton cancelButton = new JButton("Cancel");

        addButton.addActionListener(e -> {
            String name = nameField.getText();
            String contact = contactField.getText();

            Members newMember = new Members(name, contact);
            library.registerMember(newMember);

            JOptionPane.showMessageDialog(addMemberFrame, "Member added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            addMemberFrame.dispose();
        });

        cancelButton.addActionListener(e -> addMemberFrame.dispose());

        addMemberFrame.add(nameLabel);
        addMemberFrame.add(nameField);
        addMemberFrame.add(contactLabel);
        addMemberFrame.add(contactField);
        addMemberFrame.add(addButton);
        addMemberFrame.add(cancelButton);

        addMemberFrame.setVisible(true);
    }
}

import javax.swing.*;
import java.awt.*;

public class RemoveMemberGUI {
    public RemoveMemberGUI(Library library) {
        JFrame removeMemberFrame = new JFrame("Remove Member");
        removeMemberFrame.setSize(300, 200);
        removeMemberFrame.setLayout(new GridLayout(3, 1, 10, 10));

        JLabel idLabel = new JLabel("Enter Member ID:");
        JTextField idField = new JTextField();
        JButton removeButton = new JButton("Remove");
        JButton cancelButton = new JButton("Cancel");

        removeButton.addActionListener(e -> {
            String memberId = idField.getText();
            library.removeMember(memberId);
            JOptionPane.showMessageDialog(removeMemberFrame, "Member removed successfully (if it exists).", "Success", JOptionPane.INFORMATION_MESSAGE);
            removeMemberFrame.dispose();
        });

        cancelButton.addActionListener(e -> removeMemberFrame.dispose());

        removeMemberFrame.add(idLabel);
        removeMemberFrame.add(idField);
        removeMemberFrame.add(removeButton);
        removeMemberFrame.add(cancelButton);

        removeMemberFrame.setVisible(true);
    }
}

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

public class ReportsGUI {
    public ReportsGUI(Library library, Settings settings) {
        // Creating the frame
        JFrame reportsFrame = new JFrame("Library Reports");
        reportsFrame.setSize(700, 500);
        reportsFrame.setLayout(new BorderLayout(10, 10));

        // Creating the tabbed pane
        JTabbedPane tabbedPane = new JTabbedPane();

        // Adding panels to the tabbed pane
        JPanel booksPanel = createBooksPanel(library);
        JPanel membersPanel = createMembersPanel(library);
        JPanel transactionsPanel = createTransactionsPanel(library);

        tabbedPane.addTab("Books", booksPanel);
        tabbedPane.addTab("Members", membersPanel);
        tabbedPane.addTab("Transactions", transactionsPanel);

        // Creating back button
        JButton backButton = new JButton("Back");
        backButton.setToolTipText("Return to the Admin Panel.");
        backButton.addActionListener(e -> {
            new AdminPanelGUI(library, settings);
            reportsFrame.dispose();
        });

        // Adding the tabbed pane and back button to the frame
        reportsFrame.add(tabbedPane, BorderLayout.CENTER);
        reportsFrame.add(backButton, BorderLayout.SOUTH);

        applyStyling(reportsFrame);

        // Setting frame visibility
        reportsFrame.setVisible(true);
    }

    private JPanel createBooksPanel(Library library) {
        JPanel panel = new JPanel(new BorderLayout());
        String[] columns = {"Book ID", "Title", "Author", "Genre", "Availability"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        JTable table = new JTable(model);

        // Fetching books and adding rows to the table
        List<Books> books = library.getLibraryBooks(); // Make sure this list is not empty
        if (books.isEmpty()) {
            model.addRow(new Object[]{"No books available"});
        } else {
            for (Books book : books) {
                model.addRow(new Object[]{
                        book.getID(),
                        book.getTitle(),
                        book.getAuthor(),
                        book.getGenre(),
                        book.isAvailable() ? "Available" : "Issued"
                });
            }
        }

        panel.add(new JScrollPane(table), BorderLayout.CENTER);
        return panel;
    }

    private JPanel createMembersPanel(Library library) {
        JPanel panel = new JPanel(new BorderLayout());
        String[] columns = {"Member ID", "Name", "Contact Info"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        JTable table = new JTable(model);

        // Fetching members and adding rows to the table
        List<Members> members = library.getMembers(); // Ensure the members list is populated
        if (members.isEmpty()) {
            model.addRow(new Object[]{"No members available"});
        } else {
            for (Members member : members) {
                model.addRow(new Object[]{
                        member.getMemberId(),
                        member.getName(),
                        member.getContactInfo()
                });
            }
        }

        panel.add(new JScrollPane(table), BorderLayout.CENTER);
        return panel;
    }

    private JPanel createTransactionsPanel(Library library) {
        JPanel panel = new JPanel(new BorderLayout());
        String[] columns = {"Transaction ID", "Book", "Member", "Issue Date", "Return Date", "Fine"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        JTable table = new JTable(model);

        // Fetching transactions and adding rows to the table
        List<Transaction> transactions = library.getTransactions(); // Ensure transactions list is not empty
        if (transactions.isEmpty()) {
            model.addRow(new Object[]{"No transactions available"});
        } else {
            for (Transaction transaction : transactions) {
                model.addRow(new Object[]{
                        transaction.getTransactionID(),
                        transaction.getBook().getTitle(),
                        transaction.getMember().getName(),
                        transaction.getIssueDate(),
                        transaction.getReturnDate(),
                        transaction.getFine()
                });
            }
        }

        panel.add(new JScrollPane(table), BorderLayout.CENTER);
        return panel;
    }

    private void applyStyling(JFrame frame) {
        for (Component component : frame.getContentPane().getComponents()) {
            if (component instanceof JButton) {
                component.setFont(new Font("Arial", Font.BOLD, 14));
                component.setBackground(new Color(173, 216, 230));
            }
        }
    }
}

import javax.swing.*;
import java.awt.*;

public class SettingsGUI {
    public SettingsGUI(Settings settings) {
        JFrame settingsFrame = new JFrame("Library Settings");
        settingsFrame.setSize(400, 300);
        settingsFrame.setLayout(new GridLayout(5, 2, 10, 10));

        JLabel nameLabel = new JLabel("Library Name:");
        JTextField nameField = new JTextField(settings.getLibraryName());
        JLabel addressLabel = new JLabel("Address:");
        JTextField addressField = new JTextField(settings.getAddress());
        JLabel contactLabel = new JLabel("Contact Info:");
        JTextField contactField = new JTextField(settings.getContactInfo());
        JLabel fineLabel = new JLabel("Fine Rate:");
        JTextField fineField = new JTextField(String.valueOf(settings.getFineRate()));

        JButton saveButton = new JButton("Save");
        JButton cancelButton = new JButton("Cancel");

        saveButton.addActionListener(e -> {
            settings.setLibraryName(nameField.getText());
            settings.setAddress(addressField.getText());
            settings.setContactInfo(contactField.getText());
            settings.setFineRate(Double.parseDouble(fineField.getText()));

            JOptionPane.showMessageDialog(settingsFrame, "Settings updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        });

        cancelButton.addActionListener(e -> settingsFrame.dispose());

        settingsFrame.add(nameLabel);
        settingsFrame.add(nameField);
        settingsFrame.add(addressLabel);
        settingsFrame.add(addressField);
        settingsFrame.add(contactLabel);
        settingsFrame.add(contactField);
        settingsFrame.add(fineLabel);
        settingsFrame.add(fineField);
        settingsFrame.add(saveButton);
        settingsFrame.add(cancelButton);
        
        applyStyling(settingsFrame);

        settingsFrame.setVisible(true);
    }

    private void applyStyling(JFrame frame) {
        for (Component component : frame.getContentPane().getComponents()) {
            if (component instanceof JButton) {
                component.setFont(new Font("Arial", Font.BOLD, 14));
                component.setBackground(new Color(173, 216, 230));
            }
        }
    }
}

import javax.swing.*;
import java.awt.*;

class CreateLoginGUI {
    public CreateLoginGUI(MainMenu mainMenu) {
        JFrame frame = new JFrame("Create Login");
        frame.setSize(400, 300);
        frame.setLayout(new GridLayout(5, 2, 10, 10));

        JLabel roleLabel = new JLabel("Role:");
        JComboBox<String> roleComboBox = new JComboBox<>(new String[]{"Admin", "User"});
        JLabel usernameLabel = new JLabel("Username:");
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        JPasswordField passwordField = new JPasswordField();
        JButton createButton = new JButton("Create");
        JButton backButton = new JButton("Back");

        createButton.addActionListener(e -> {
            String role = (String) roleComboBox.getSelectedItem();
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (role.equals("Admin")) {
                MainMenu.getAdminCredentials().put(username, password);
                JOptionPane.showMessageDialog(frame, "Admin credentials created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                MainMenu.getUserCredentials().put(username, password);
                JOptionPane.showMessageDialog(frame, "User credentials created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        backButton.addActionListener(e -> {
            frame.dispose();
            new MainMenu(mainMenu.getLibrary(), mainMenu.getSettings(), mainMenu.getSearch());
        });

        frame.add(roleLabel);
        frame.add(roleComboBox);
        frame.add(usernameLabel);
        frame.add(usernameField);
        frame.add(passwordLabel);
        frame.add(passwordField);
        frame.add(createButton);
        frame.add(backButton);

        frame.setVisible(true);
    }
}

public class Statistics {
    private Library library;

    public Statistics(Library library) {
        this.library = library;
    }

    public void generateStatistics() {
        System.out.println("Library Usage Statistics:");
        System.out.println("Total number of books: " + library.getTotalBooks());
        System.out.println("Total number of members: " + library.getMembers().size());
        
        // Sample stats
        int booksBorrowed = 0;
        for (Members member : library.getMembers()) {
            booksBorrowed += member.getBorrowedBooks().size();
        }
        System.out.println("Total books currently borrowed: " + booksBorrowed);
    }
}

import java.util.ArrayList;
public class Main {
    public static void main(String[] args) {
        // Initialize the Library
        Library library = new Library("City Library", "123 Main St", "contact@citylibrary.com");

        // Initialize Settings
        Settings settings = new Settings("City Library", "123 Main St", "contact@citylibrary.com", 1.5);

        // Initialize Search
        Search search = new Search(library);

        library.addBook(new Books("The Great Gatsby", "F. Scott Fitzgerald", 1925, "Fiction"));
        library.addBook(new Books("To Kill a Mockingbird", "Harper Lee", 1960, "Fiction"));

        // Add some initial members directly to the library
        library.registerMember(new Members("John Doe", "john.doe@example.com"));
        library.registerMember(new Members("Jane Smith", "jane.smith@example.com"));
     
        ArrayList<Books> books = new ArrayList<>();
        ArrayList<Members> members = new ArrayList<>();

        for (Books book : books) {
            library.addBook(book);  // Adding books to the library
        }

        for (Members member : members) {
            library.registerMember(member);  // Adding members to the library
        }

        System.out.println("Library Books: " + library.getLibraryBooks().size());
        System.out.println("Library Members: " + library.getMembers().size());
        System.out.println("Library Transactions: " + library.getTransactions().size());
        
        new ReportsGUI(library, settings);
        // Launch the Main Menu
        new MainMenu(library, settings, search);
    }
}


